#ifndef __ASCOMPILER
 #error Script for ASCompiler only
#endif

#ifdef __CLIENT
 #define TARGET   "Client"
 #pragma bindfunc "void CollectFOnlineInfo(string[]&,string[]&) -> lib/fos.syntax.client.so CollectFOnlineInfo"
#endif
#ifdef __MAPPER
 #define TARGET   "Mapper"
 #pragma bindfunc "void CollectFOnlineInfo(string[]&,string[]&) -> lib/fos.syntax.mapper.so CollectFOnlineInfo"
#endif
#ifdef __SERVER
 #define TARGET   "Server"
 #pragma bindfunc "void CollectFOnlineInfo(string[]&,string[]&) -> lib/fos.syntax.server.so CollectFOnlineInfo"
#endif

#ifndef OUTFILE
 #error OUTFILE not defined
#endif

void saveArray( file& f, string& comment, string& define, array<string> arr, uint arrMax, bool addons = false )
{
    f.writeString( "    #=========================\n    # "+comment+"\n" );
    for( uint a=0, aLen=arr.length(); a<aLen; a++ )
    {
	if( arr[a] == "CollectFOnlineInfo" )
	    continue;

	if( arr[a] == "__CompilerLog" ) // masked Log()
	    continue; 
	if( arr[a] == "__CompilerGetLoadedModules" ) // masked GetLoadedModules()
	    continue;

	// lowercase functions are registered by addons
	if( arr[a].rawGet(0) >= 'a' && arr[a].rawGet(0) <= 'z' )
	{
	    if( !addons )
		continue;
	}
	else if( addons )
	    continue;

	string result = "    keyword whole "+arr[a];
	for( uint s=arr[a].length(); s<=arrMax; s++ )
	{
	    result += " ";
	}
	result += define;
	f.writeString( result+"\n" );
    }
}

void main()
{
    array<string> vars, funcs;
    uint varsMax = 0, funcsMax = 0;
    CollectFOnlineInfo( vars, funcs );

    uint vLen = vars.length;
    uint fLen = funcs.length;
    if( vLen > 0 || fLen > 0 )
    {
	file outFile;
	if( outFile.open( OUTFILE, "a" ) >= 0 )
	{
	    if( fLen > 0 )
	    {
		uint aMax = 0;
		for( uint a=0; a<fLen; a++ )
		{
		    if( funcs[a].rawGet(0) >= 'a' && funcs[a].rawGet(0) <= 'z' && funcs[a].length() > aMax )
			aMax = funcs[a].length();
		}
		saveArray( outFile, "addons functions", "addons-functions", funcs, aMax, true );
		outFile.writeString( "\n" );
	    }
	    if( vLen > 0 )
	    {
		uint vMax = 0;
		for( uint v=0; v<vLen; v++ )
		{
		    if( vars[v].length() > vMax )
			vMax = vars[v].length();
		}
		saveArray( outFile, TARGET+" variables", "fonline-vars", vars, vMax );
		outFile.writeString( "\n" );
	    }
	    if( fLen > 0 )
	    {
		uint fMax = 0;
		for( uint f=0; f<fLen; f++ )
		{
		    if( !(funcs[f].rawGet(0) >= 'a' && funcs[f].rawGet(0) <= 'z') && funcs[f].length() > fMax )
			fMax = funcs[f].length();
		}
		saveArray( outFile, TARGET+" functions", "fonline-functions", funcs, fMax );
		outFile.writeString( "\n" );
	    }
	    outFile.close();
	}
    }
}
